{"version":3,"sources":["useLocalStorage.js","WeatherItem.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","weatherItem","weatherData","className","date","temp","dayTemp","baseURL","App","currentWeather","setCurrentWeather","forecasts","weekWeather","setWeekWeather","country","setCountry","city","setCity","reset","setReset","useEffect","a","axios","get","params","result","data","days","handleSubmit","e","preventDefault","result1","onSubmit","onChange","ev","target","type","onClick","slice","map","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb7d3cdc.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\n// Hook\r\nexport function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}","\r\n\r\nexport function weatherItem(weatherData) {\r\n    return <div className=\"result-container\">\r\n\r\n        <p>\r\n            <section>\r\n                <strong>Date: </strong><span className=\"cases\">{weatherData?.date}</span>\r\n            </section>\r\n            <section>\r\n                <strong>Temp: </strong><span className=\"cases\">{weatherData?.temp || weatherData?.dayTemp}</span>\r\n            </section>\r\n\r\n        </p>\r\n    </div>;\r\n}","import { useEffect, useState, useRef } from \"react\";\nimport './App.css';\nimport axios from 'axios';\nimport { useLocalStorage } from \"./useLocalStorage\";\nimport { weatherItem } from \"./WeatherItem\";\nconst baseURL = 'https://agile-bayou-81380.herokuapp.com/';\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [weekWeather, setWeekWeather] = useState({ forecasts: [] });\n  const [country, setCountry] = useLocalStorage(\"country\", ``);\n  const [city, setCity] = useLocalStorage(\"city\", ``);\n  const [reset, setReset] = useState(!country || !city);\n  useEffect(async () => {\n    const result = await axios.get(`currentforecasts`, {\n      baseURL,\n      params: { city, country }\n    });\n    setCurrentWeather(result.data);\n  }, [])\n\n  useEffect(async () => {\n    const result = await axios.get(`forecasts`, {\n      baseURL,\n      params: { city, country, days: 5 }\n    });\n    setWeekWeather(result.data);\n  }, [])\n  const handleSubmit = async (e) => {\n    setReset(false);\n    e?.preventDefault();\n    const result = await axios.get(`currentforecasts`, {\n      baseURL,\n      params: {\n        city,\n        country\n      }\n    })\n    const result1 = await axios.get(`forecasts`, {\n      baseURL,\n      params: { city, country, days: 5 }\n    });\n    setCurrentWeather(result.data);\n    setWeekWeather(result1.data);\n\n\n    console.log(currentWeather?.temp)\n  };\n  return (\n    <div className=\"App\">\n      {reset &&\n        <form className=\"form-data\" onSubmit={handleSubmit}>\n          <div className=\"enter-country\">\n            Enter a country :\n          </div>\n          <div>\n            <input value={country} onChange={(ev) => setCountry(ev.target.value)} type=\"text\" className=\"country-name\" />\n          </div>\n          <div className=\"enter-city\">\n            Enter a city :\n          </div>\n          <div>\n            <input value={city} onChange={(ev) => setCity(ev.target.value)} type=\"text\" className=\"city-name\" />\n          </div>\n          <button className=\"search-btn\">Search</button>\n        </form>}\n      {!reset && <>\n        <button onClick={() => setReset(true)}>Change location</button>\n      </>}\n      <div className=\"result\">\n        {weatherItem(currentWeather)}\n        {weekWeather?.forecasts?.slice(1)?.map(data => weatherItem(data))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}